// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AppDataContext))]
    partial class AppDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("API.Cargo", b =>
                {
                    b.Property<int>("CargoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("CargoId");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("API.Grupo", b =>
                {
                    b.Property<int>("GrupoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("GrupoId");

                    b.ToTable("Grupos");
                });

            modelBuilder.Entity("API.Prioridade", b =>
                {
                    b.Property<int>("PrioridadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("PrioridadeId");

                    b.ToTable("Prioridades");
                });

            modelBuilder.Entity("API.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("StatusId");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("API.Tarefa", b =>
                {
                    b.Property<int>("TarefaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Corpo")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PrioridadeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TarefaId");

                    b.HasIndex("PrioridadeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Tarefas");

                    b.HasDiscriminator<string>("Tipo").HasValue("Tarefa");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("API.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataNascimento")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Logado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Login")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Senha")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuarios");

                    b.HasDiscriminator<string>("Tipo").HasValue("Usuario");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("API.TarefaAtividade", b =>
                {
                    b.HasBaseType("API.Tarefa");

                    b.HasDiscriminator().HasValue("ATIVIDADE");
                });

            modelBuilder.Entity("API.TarefaProjeto", b =>
                {
                    b.HasBaseType("API.Tarefa");

                    b.HasDiscriminator().HasValue("PROJETO");
                });

            modelBuilder.Entity("API.UsuarioAdmin", b =>
                {
                    b.HasBaseType("API.Usuario");

                    b.HasDiscriminator().HasValue("ADMIN");
                });

            modelBuilder.Entity("API.UsuarioGerencial", b =>
                {
                    b.HasBaseType("API.Usuario");

                    b.Property<int?>("CargoId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GrupoId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("CargoId");

                    b.HasIndex("GrupoId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("GERENCIAL");
                });

            modelBuilder.Entity("API.UsuarioOperacional", b =>
                {
                    b.HasBaseType("API.Usuario");

                    b.Property<int?>("CargoId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GrupoId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("CargoId");

                    b.HasIndex("GrupoId");

                    b.ToTable("Usuarios", t =>
                        {
                            t.Property("CargoId")
                                .HasColumnName("UsuarioOperacional_CargoId");

                            t.Property("GrupoId")
                                .HasColumnName("UsuarioOperacional_GrupoId");
                        });

                    b.HasDiscriminator().HasValue("OPERACIONAL");
                });

            modelBuilder.Entity("API.Tarefa", b =>
                {
                    b.HasOne("API.Prioridade", "Prioridade")
                        .WithMany("Tarefa")
                        .HasForeignKey("PrioridadeId");

                    b.HasOne("API.Status", "Status")
                        .WithMany("Tarefa")
                        .HasForeignKey("StatusId");

                    b.HasOne("API.Usuario", "Usuario")
                        .WithMany("Tarefa")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Prioridade");

                    b.Navigation("Status");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("API.UsuarioGerencial", b =>
                {
                    b.HasOne("API.Cargo", "Cargo")
                        .WithMany("UsuariosGerenciais")
                        .HasForeignKey("CargoId");

                    b.HasOne("API.Grupo", "Grupo")
                        .WithOne("Gerenciador")
                        .HasForeignKey("API.UsuarioGerencial", "GrupoId");

                    b.Navigation("Cargo");

                    b.Navigation("Grupo");
                });

            modelBuilder.Entity("API.UsuarioOperacional", b =>
                {
                    b.HasOne("API.Cargo", "Cargo")
                        .WithMany("UsuariosOperacionais")
                        .HasForeignKey("CargoId");

                    b.HasOne("API.Grupo", "Grupo")
                        .WithMany("UsuariosOperacionais")
                        .HasForeignKey("GrupoId");

                    b.Navigation("Cargo");

                    b.Navigation("Grupo");
                });

            modelBuilder.Entity("API.Cargo", b =>
                {
                    b.Navigation("UsuariosGerenciais");

                    b.Navigation("UsuariosOperacionais");
                });

            modelBuilder.Entity("API.Grupo", b =>
                {
                    b.Navigation("Gerenciador");

                    b.Navigation("UsuariosOperacionais");
                });

            modelBuilder.Entity("API.Prioridade", b =>
                {
                    b.Navigation("Tarefa");
                });

            modelBuilder.Entity("API.Status", b =>
                {
                    b.Navigation("Tarefa");
                });

            modelBuilder.Entity("API.Usuario", b =>
                {
                    b.Navigation("Tarefa");
                });
#pragma warning restore 612, 618
        }
    }
}
